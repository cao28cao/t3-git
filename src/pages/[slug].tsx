import Head from "next/head";
import Image from "next/image";
import type { GetStaticProps, InferGetStaticPropsType, NextPage } from "next";
import { api } from "~/utils/api";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;
const SingleProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data, isLoading } = api.profile.getUserByUsername.useQuery({
    username: "cao28cao",
  });

  if (!data) return <div>404</div>;

  console.log("ðŸš€ data", data);
  return (
    <>
      <Head>
        <title>T3 Git - {data?.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-36 border-b border-slate-400 bg-slate-600">
          <Image
            src={data.profileImageUrl}
            alt="Profile Image"
            width={96}
            height={96}
            className="absolute bottom-0 left-0 -mb-16 ml-4 border-4 border-black bg-black ring-fuchsia-50"
          />
        </div>

        <div className="h-[64px]"></div>
        <div className=" p-4 text-2xl font-bold">
          <span className="text-xl font-bold">
            {`@${data?.username ?? ""}`}
          </span>
        </div>
        <div className="w-full border-b border-slate-400" />
      </PageLayout>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import { db } from "~/server/db";
import superjson from "superjson";
import { PageLayout } from "~/components/global/layout";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { db, currentUser: null },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("No slug");

  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({
    username,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
export default SingleProfilePage;
